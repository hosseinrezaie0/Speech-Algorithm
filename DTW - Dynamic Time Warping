import numpy as np
import math 

S1 = np.array([[12, 11, 15, 15],[50, 51, 50, 52]])
T1 = np.array([[12, 13, 13, 14, 17],[53, 50, 52, 48, 49]])

p = 2    # Number of features
n = S1.shape[1]    # Length of sample
m = T1.shape[1]   # Length of template

nt = 1 # Number of templates

distance_matrix = np.zeros((n, m))

def calculate_distance(sample, template):
    for i in range(n):
        for j in range(m):
            distance = 0
            for k in range(p):
                distance = ((S1[k][i] - T1[k][j]) ** 2) + distance
            distance = math.sqrt(distance)

            if i == 0 and j == 0:       # Map the beginning of sample and template
                distance_matrix[0][0] = distance
            elif (i == 0 and j != 0):
                distance_matrix[i][j] = distance + distance_matrix[i][j-1]
            elif (i != 0 and j == 0):
                distance_matrix[i][j] = distance + distance_matrix[i-1][j]
            else:
                min_neighbor = min(distance_matrix[i][j-1], distance_matrix[i-1][j], distance_matrix[i-1][j-1])
                distance_matrix[i][j] = distance + min_neighbor
            
calculate_distance(S1, T1)
print(distance_matrix)

